class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
       Arrays.sort(potions);
        for(int i=0;i<spells.length;i++){
            int l=0,h=potions.length;
            while(l<h){
                int mid = (l+h)/2;
                if(1L*spells[i]*potions[mid]>=success){
                    h=mid;
                }else{
                    l=mid+1;
                }
            }
            spells[i]=potions.length-l;
        }
        return spells;
    
    }
}
//Question


spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.
