class Solution {
    public int minOperations(int[] nums, int x) {
        int target=-x;
         for(int i:nums)target=target+i;
        if(target==0)return nums.length;
        if(target<0)return -1;
        
        int sum=0;int start=0;int ans=-1;
        for(int end=0;end<nums.length;end++){
            sum=sum+nums[end];
            while(sum>target){//strink window
                sum=sum-nums[start++];
            }
            if(sum==target){//reached find length of window make sure it is of max length
                ans=Math.max(ans,end-start+1);
            }
        }
        return ans==-1?-1:nums.length-ans;
 }
}
//length of window is max then no.of  elemnts to be removed wil be low
//Except the elements we get target=0 remaining all elemmts should be removed
//find window where we reach our target make sure our window is as large as possible so that no.of operations will be less
//OTHER APPROCH WONT WORK FOR LARGE
 /*int ans=Integer.MAX_VALUE;
 public int minOperations(int[] nums, int x) {
     helper(nums,x,0,0,nums.length-1);
        return ans==Integer.MAX_VALUE?-1:ans ;
    }
    void  helper(int nums[],int x,int count,int start,int end){
     if(x==0){
         ans=Math.min(ans,count);
     }
      if(start>end)return;
    
      helper(nums,x-nums[end],count+1,start,end-1);
      helper(nums,x-nums[start],count+1,start+1,end);*/
