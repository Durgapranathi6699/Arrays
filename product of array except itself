class Solution {
    public int[] productExceptSelf(int[] nums) {
        int ans[]=new int[nums.length];
       ans[0]=1;//for left most there is no left exist
        for(int i=1;i<nums.length;i++){//left
            ans[i]=ans[i-1]*nums[i-1]; }
        int r=1;//for right most no right
        for(int i=nums.length-1;i>=0;i--){//right
            ans[i]=ans[i]*r;
            r=r*nums[i];  }
        return ans;
        // int left[]=new int[nums.length];//TC:O(N) SPACE O(N)
        // int right[]=new int[nums.length];
        // left[0]=1;
        // for(int i=1;i<nums.length;i++){
        //     left[i]=left[i-1]*nums[i-1];
        // }
        // right[nums.length-1]=1;
        // for(int i=nums.length-2;i>=0;i--){
        //     right[i]=right[i+1]*nums[i+1];
        // }
        // for(int i=0;i<nums.length;i++){
        //     ans[i]=left[i]*right[i];
        // }
        // return ans;
    }}  
/*[1,2,3,4]
right [24,12,4,1]                          ex:[-1,1,0,-3,3]
left [1 1 2 6]                              left [-1 -1 -1 
ans [24 12 8 6]  -->left*right              right [0 0 -9 3 1]       ans  [0 0 9 0 0]
             
//BRUTE FORCE O(N^2)
  int ans[]=new int[nums.length];
        int j=0;int p=1;
        while(j<nums.length){
       for(int i=0;i<nums.length;i++){
           if(i!=j){ p=p*nums[i];  } }  
            ans[j]=p; p=1;  j++;}
        return ans;*/
