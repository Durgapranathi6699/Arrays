
//best time to buy and sell stock

class Solution {
    public int maxProfit(int[] prices) {
        int profit=0;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<prices.length;i++){
            min=Math.min(min,prices[i]);//this we buyed here
            profit=Math.max(profit,prices[i]-min);//after that we are selling
             }
        return profit;
    }
   
}

//best time to buy and sell stock 2
class Solution {
    public int maxProfit(int[] prices) {
        int profit=0;
        for(int i=1;i<prices.length;i++){
            if(prices[i-1]<prices[i]){
                profit+=prices[i]-prices[i-1];
            }
        }
        return profit;
    }
}
//best time to buy and sell stock with cooldown

class Solution {
    public int maxProfit(int[] prices) {
        Integer dp[][]=new Integer[2][prices.length];
         return helper(0,prices.length-1,0,prices,dp);      //0 indicates we didnt buy the stock (no stock)
      }
    int helper(int i,int n,int flag,int[] prices,Integer dp[][]){
        if(i>n){
            return 0;
        }
        if(dp[flag][i]!=null){
            return dp[flag][i];
        }
        int ans=0;
        if(flag==0){                                       //so buy the stock or cooldown

          int buy=0-prices[i]+(helper(i+1,n,1,prices,dp));   //current profit=(-prices[i])

          int cool=0+(helper(i+1,n,0,prices,dp));

          ans=Math.max(buy,cool);
        }
        else{                                              //we have stock so sell or cooldown
        int sell=prices[i]+(helper(i+2,n,0,prices,dp));    //after selling u can not buy because of cooldown
       
        int cool=helper(i+1,n,1,prices,dp);  

            ans=Math.max(sell,cool);
        }
        dp[flag][i]=ans;//memoization
        return dp[flag][i];
    }
}
